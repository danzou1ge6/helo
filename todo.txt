[x] Support recursive function in type-checker
[x] Check infinite type e.g. 0 = [0] -> 1 when resolving type
[x] Support recursive closure
[x] Tuple expression, pattern, and type
[x] Remove trailing space in Meta
[x] Fix expression type annotation: Currently type-vars in annotations are colliding inferer-defined ones
[x] Support guard in case-of expression
[x] Use more efficient method when backing-up union-find array
[-] Check constructor name is uppercase
    Not needed. Now whether a identifier is a constructor is determined if such constructor exists.
[x] Curried function
[x] More accurate parse-error position
[x] Check number of variants of a type is at most 256
[x] Check number of parameters of a function is at most 256
[x] Runtime error reporting with source code
[x] Constant propagation optimization
[ ] Tuple construction-and-then-deconstruction optimization for pattern matching
[x] Control flow optimization
[ ] Detect multiple definitions
[ ] Constructor as function
[-] Call-instead-of-apply optimization based on type
    Not possible
[x] Curry notion for callable type
[x] Impurity and IO
[x] Recursive type in inference, for example List['0] = '0
[x] Emit artifect and run
[x] Module
[x] Comments
[x] Ad-hoc polymorphism
[x] Infix constructor
[ ] Inline optimization
[x] Relation methods for arithmatics
[x] Anonymous closure
[-] Fix bug in closure tailcall in virtual machine
    This problem never existed. I thought of it long ago.
[x] Fix bug in discovering closure tailcall
[x] Fix bug of fail to unify wildcard type
[x] Force arithmatic operators to take two operands of same type
[x] Modifying generic type variables should be prohibited
[ ] Trace back to definition of generic type variable in diagnostic
