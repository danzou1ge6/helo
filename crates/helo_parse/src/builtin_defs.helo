module arith.int
    builtin fn +   a,b : [Int, Int] -> Int = ..
    builtin fn -   a,b : [Int, Int] -> Int = ..
    builtin fn *   a,b : [Int, Int] -> Int = ..
    builtin fn **  a,b : [Int, Int] -> Int = ..
    builtin fn /   a,b : [Int, Int] -> Int = ..
    builtin fn mod a,b : [Int, Int] -> Int = ..

    instance ops.Add Int,Int
        fn + a,b = a + b
    end
    instance ops.Subs Int,Int
        fn - a,b = a - b
    end
    instance ops.Mul Int,Int
        fn * a,b = a * b
    end
    instance ops.Div Int,Int
        fn / a,b = a / b
    end
    instance ops.Pow Int,Int,Int
        fn ** a,b = a ** b
    end
    instance ops.Mod Int,Int,Int
        fn mod a,b = mod a,b
    end

    builtin fn == a,b : [Int, Int] -> Bool = ..
    builtin fn /= a,b : [Int, Int] -> Bool = ..
    builtin fn >= a,b : [Int, Int] -> Bool = ..
    builtin fn <= a,b : [Int, Int] -> Bool = ..
    builtin fn >  a,b : [Int, Int] -> Bool = ..
    builtin fn <  a,b : [Int, Int] -> Bool = ..

    instance ops.Eq Int
        fn == a,b = a == b
        fn /= a,b = a /= b
    end
    instance ops.Gt Int
        fn > a,b = a > b
    end
    instance ops.Lt Int
        fn < a,b = a < b
    end
    instance ops.Ge Int
        fn >= a,b = a >= b
    end
    instance ops.Le Int
        fn <= a,b = a <= b
    end
    instance ops.Ord Int
    end

end

module arith.float
    builtin fn neg  a   : [Float] -> Float        = ..
    builtin fn +.   a,b : [Float, Float] -> Float = ..
    builtin fn -.   a,b : [Float, Float] -> Float = ..
    builtin fn *.   a,b : [Float, Float] -> Float = ..
    builtin fn **.  a,b : [Float, Int] -> Float   = ..
    builtin fn **.. a,b : [Float, Float] -> Float = ..
    builtin fn /.   a,b : [Float, Float] -> Float = ..

    instance ops.Add Float,Float
        fn + a,b = a +. b
    end
    instance ops.Subs Float,Float
        fn - a,b = a -. b
    end
    instance ops.Mul Float,Float
        fn * a,b = a *. b
    end
    instance ops.Div Float,Float
        fn / a,b = a /. b
    end
    instance ops.Pow Float,Float,Float
        fn ** a,b = a **.. b
    end
    instance ops.Pow Float,Int,Float
        fn ** a,b = a **. b
    end

    builtin fn =.   a,b : [Float, Float] -> Bool = ..
    builtin fn /=.  a,b : [Float, Float] -> Bool = ..
    builtin fn <=.  a,b : [Float, Float] -> Bool = ..
    builtin fn >=.  a,b : [Float, Float] -> Bool = ..
    builtin fn >.   a,b : [Float, Float] -> Bool = ..
    builtin fn <.   a,b : [Float, Float] -> Bool = ..

    instance ops.Eq Float
        fn == a,b = a =. b
        fn /= a,b = a /=. b
    end
    instance ops.Gt Float
        fn > a,b = a >. b
    end
    instance ops.Lt Float
        fn < a,b = a <. b
    end
    instance ops.Ge Float
        fn >= a,b = a >=. b
    end
    instance ops.Le Float
        fn <= a,b = a <=. b
    end

    builtin fn int_to_float a : [Int] -> Float   = ..
    builtin fn floor_float  a : [Float] -> Int   = ..
    builtin fn ceil_float   a : [Float] -> Int   = ..
    builtin fn round_float  a : [Float] -> Int   = ..

    instance convert.From Float,Int
        fn from i = int_to_float i
    end

end

module fmt
    builtin fn int_to_str   a     : [Int] -> Str      = ..
    builtin fn float_to_str a     : [Float] -> Str    = ..
    builtin fn bool_to_str  a     : [Bool] -> Str     = ..
    builtin fn char_to_str  a     : [Char] -> Str     = ..

    relation ToString T 
        fn to_string x : [T] -> Str
    end

    instance ToString Int
        fn to_string i = int_to_str i
    end
    instance ToString Float
        fn to_string f = float_to_str f
    end
    instance ToString Bool
        fn to_string b = bool_to_str b
    end
    instance ToString Char
        fn to_string c = char_to_str c
    end
end

module arith.bool
    builtin fn and a,b : [Bool, Bool] -> Bool = ..
    builtin fn or  a,b : [Bool, Bool] -> Bool = ..
    builtin fn not a   : [Bool] -> Bool       = ..
end

module arith.char
    builtin fn eq      a,b   : [Char, Char] -> Bool = ..
    
    instance ops.Eq Char
        fn == a,b = eq a,b
        fn /= a,b = arith.bool.not eq a,b
    end
end

module str
    builtin fn cat      a,b   : [Str, Str] -> Str  = ..
    builtin fn some     a     : [Str] -> Bool      = ..
    builtin fn len      a     : [Str] -> Int       = ..
    builtin fn eq       a,b   : [Str, Str] -> Bool = ..
    builtin fn head     a     : [Str] -> Char      = ..
    builtin fn tail     a     : [Str] -> Str       = ..

    instance ops.Mul Str,Str
        fn * a,b = cat a,b
    end
    instance ops.Eq Str
        fn == a,b = eq a,b
        fn /= a,b = arith.bool.not eq a,b
    end
end

module io
    builtin routine  println msg   : [Str] -> ()         = ..
    builtin routine  print   msg   : [Str] -> ()         = ..
    builtin routine  readline      : [] -> Str           = ..
end

module panic
    builtin fn panic msg   : [Str] -> T = ..
end

module option
    data Option[T] = Some T
                   | None
    
    fn unwrap x = case x of
        | Some x -> x
        | _ -> panic.panic "called unwrap on `None`"
    end
end

module result
    data Result[T, E] = Ok T
                      | Err E
end

module list
    data List[T] = :: T, List[T] 
                   | []
    
    fn head xs = case xs of
        | x::xs -> option.Some x
        | [] -> option.None
    end

    fn tail xs = case xs of
        | x::xs -> option.Some xs
        | [] -> option.None
    end

    fn is_empty xs = case xs of
        | [] -> true
        | _ -> false
    end

    fn rev xs: [List[T]] -> List[T] =
        let fn helper as, bs: [List[T], List[T]] -> List[T] =
            case as of
            | [] -> bs
            | a :: as -> helper as, a :: bs
            end
        in
        helper xs,[]
end

module ops
    relation Add A,C -> C
        fn + a,b : [A, A] -> C
    end
    relation Subs A,C -> C
        fn - a,b : [A, A] -> C
    end
    relation Mul A,C -> C
        fn * a,b : [A, A] -> C
    end
    relation Div A,C -> C
        fn / a,b : [A, A] -> C
    end
    relation Pow A,B,C -> C
        fn ** a,b : [A, B] -> C
    end
    relation Mod A,B,C -> C
        fn mod a,b : [A, B] -> C
    end

    relation Eq T
        fn /= a,b : [T, T] -> Bool
        fn == a,b : [T, T] -> Bool
    end
    relation Lt T
        fn < a,b : [T, T] -> Bool
    end
    relation Gt T
        fn > a,b : [T, T] -> Bool
    end
    relation Le T
        fn <= a,b : [T, T] -> Bool
    end
    relation Ge T
        fn >= a,b : [T, T] -> Bool
    end

    relation Ord T where Eq T + Lt T
    end

    fn max a,b : [T, T] -> T where Ord T =
        if a < b then b else a
    
    fn min a,b : [T, T] -> T where Ord T =
        if a < b then a else b
    
end

module convert
    relation From A,B
        fn from b : [B] -> A
    end
    relation Into A,B
        fn into a : [A] -> B
    end
    instance Into A,B where From B,A
        fn into a = from a
    end
end
