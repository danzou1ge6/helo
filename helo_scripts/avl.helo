use ops
use result
use str

infix :: 10 9
infix // 9 10

data Avl['a] = Empty
             | Node 'a, Avl['a], Avl['a], Int

fn height t = case t of
    | Empty -> 0
    | Node _,_,_,h -> h
    end

fn balance_factor t = case t of
    | Node _, left, right, _ -> (height left) - (height right)
    | Empty -> 0
    end

fn node v,left,right = Node v,left,right,1 + (max (height left),(height right))

fn rotate_left t = case t of
    | Node x,a,(Node y,b,c,_),_ -> node y,(node x,a,b),c
    end

fn rotate_right t = case t of
    | Node x,(Node y,a,b,_),c,_ -> node y,a,(node x,b,c)
    end

fn balance t = case t of
    | Empty -> t
    | Node x,left,right,_ ->
        let factor = balance_factor t in
        if factor > 1 then
            if (balance_factor left) >= 0 then
                rotate_right t
            else
                rotate_right (node x, (rotate_left left), right)
        else if factor < -1 then
            if (balance_factor right) <= 0 then
                rotate_left t
            else
                rotate_left (node x, left, (rotate_right right))
        else
            t
    end

fn insert 'a x,t: ['a, Avl['a]] -> Avl['a] where Ord 'a =
    case t of
    | Empty -> Node x,Empty,Empty,1
    | Node v,left,right,h ->
        if x < v then
            let new_left = insert x,left in
            balance (node v,new_left,right)
        else if x > v then
            let new_right = insert x,right in
            balance (node v,left,new_right)
        else
            Node x,left,right,h
    end

fn find_min 'a t: [Avl['a]] -> 'a = case t of
    | Node v,Empty,_,_ -> v
    | Node _,left,_,_ -> find_min left
    end

fn delete 'a x,t: ['a, Avl['a]] -> Avl['a] where Ord 'a =
    case t of
    | Empty -> t
    | Node v,left,right,h ->
        if x < v then
            let new_left = delete x,left in
            balance (node v,new_left,right)
        else if x > v then
            let new_right = delete x,right in
            balance (node v,left,new_right)
        else
            case left of
            | Empty -> right
            | _ ->
                case right of
                | Empty -> left
                | _ ->
                    let min_val = find_min right in
                    let new_right = delete min_val,right in
                    balance (node min_val,left,new_right)
                end
            end
    end

fn contains 'a x,t: ['a, Avl['a]] -> Bool where Ord 'a =
    case t of
    | Empty -> false
    | Node v,left,right,_ ->
        if x < v then
            contains x,left
        else if x > v then
            contains x,right
        else
            x == v
    end

fn str_repeat c,n: [Char, Int] -> Str =
    let fn helper s,c,n: [Str, Char, Int] -> Str =
        if n == 0 then
            s
        else
            helper ((fmt.to_string c) * s),c,(n - 1)
    in
        helper "",c,n

fn debug 'a t,indent: [Avl['a], Int] -> Str where fmt.ToString 'a =
    case t of
    | Empty -> (str_repeat ' ',indent) * "()\n"
    | Node v,Empty,Empty,h ->
        (str_repeat ' ',indent) * (fmt.to_string v) * ", h = " * (fmt.to_string h) * "\n"
    | Node v,left,right,h ->
        (str_repeat ' ',indent) * (fmt.to_string v) * ", h = " * (fmt.to_string h) * "\n"
        * (debug left, (indent + 1))
        * (debug right, (indent + 1))
    end

fn :: x,t = insert x,t
fn // t,x = delete x,t

data Command = Insert Int | Delete Int
data ParseError = ParseError Str,Str

fn parse_digit s: [Str] -> (Str, Result[Int, ParseError]) =
    if str_some s then
        case str_head s of
        | '0' -> ((str_tail s), Ok 0)
        | '1' -> ((str_tail s), Ok 1)
        | '2' -> ((str_tail s), Ok 2)
        | '3' -> ((str_tail s), Ok 3)
        | '4' -> ((str_tail s), Ok 4)
        | '5' -> ((str_tail s), Ok 5)
        | '6' -> ((str_tail s), Ok 6)
        | '7' -> ((str_tail s), Ok 7)
        | '8' -> ((str_tail s), Ok 8)
        | '9' -> ((str_tail s), Ok 9)
        | _   -> (s, Err ParseError s,"digit")
        end
    else (s, Err ParseError s,"digit")

fn parse_int s,x: [Str, Int] -> (Str, Int) =
    case parse_digit s of
    | (s1, Ok digit) ->
        parse_int s1,(x * 10 + digit)
    | (s1, Err e   ) ->
        (s1, x)
    end

fn parse_command s: [Str] -> (Str, Result[Command, ParseError]) =
    if str_some s then
        case str_head s of
        | 'i' -> let (s1, x) = parse_int (str_tail s),0 in (s1, Ok Insert x)
        | 'd' -> let (s1, x) = parse_int (str_tail s),0 in (s1, Ok Delete x)
        end
    else (s, Err ParseError s,"command")

routine main =
    let mut tree1 = 1::4::2::6::5::Empty // 1 // 6 in begin
    while true then begin
        let line = io.readline ();
        case parse_command line of
        | (_, Ok Insert x) -> begin
            tree1 <- insert x,tree1;
            io.println (debug tree1,0)
            end
        | (_, Ok Delete x) -> begin
            tree1 <- delete x,tree1;
            io.println (debug tree1,0)
            end
        | (_, Err e) -> io.println "Bad command"
        end
    end
    end

