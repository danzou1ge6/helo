
data Tree['a] = Branch Tree['a], Tree['a]
              | Leaf 'a

data List['a] = Con 'a, List['a]
              | Nil

let fn fold 'a, 'b f, init, xs : [['a, 'b] -> 'b, 'b, List['a]] -> 'b =
    case xs of Con y, ys -> fold f, (f y, init), ys
             | Nil       -> init

let fn left_most 'a tree : [Tree['a]] -> 'a =
    case tree of Branch left,_ -> left_most left
               | Leaf x        -> x

let fn sum xs = fold (+), 0, xs

