relation Iterator 'a,'b -> 'b
    fn next it: ['a] -> ('a, 'b)
end

data IntIterator = IntIterator Int

instance Iterator IntIterator,Int
    fn next it =
        let IntIterator x = it in
        use ops of (+) in
        ((IntIterator x + 1), x)
end

fn take 'a,'b it,n: ['a, Int] -> list.List['b] where Iterator 'a,'b =
    use list in
    use ops of (-),(==) in
    if n == 0 then
        []
    else
        let (it, x) = next it in
        x :: (take it,n - 1)

routine main = take (IntIterator 1),3