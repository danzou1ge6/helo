use list of ([]), (::), List, rev
use ops
use option of Option, Some, None
use result
use str

infix :- 10 9

data Node['a] = Node Int,'a,List['a],List[Node['a]]

data Heap['a] = Heap List[Node['a]]

fn is_empty h =
    let Heap ts = h in
    list.is_empty ts

fn rank node = let Node r,_,_,_ = node in r

fn root node = let Node _,x,_,_ = node in x

fn link 'a t1,t2: [Node['a], Node['a]] -> Node['a] where Ord 'a =
    let Node r,x1,xs1,c1 = t1 in
    let Node _,x2,xs2,c2 = t2 in
    if x2 < x1 then
        Node r + 1, x2, xs2, t1 :: c2
    else
        Node r + 1, x1, xs1, t2 :: c1

fn skew_link 'a x,t1,t2: ['a, Node['a], Node['a]] -> Node['a] where Ord 'a =
    let Node r,y,ys,c = link t1,t2 in
    if y < x then
        Node r, y, x :: ys, c
    else
        Node r, x, y :: ys, c

fn ins_tree 'a t,ts : [Node['a], List[Node['a]]] -> List[Node['a]] where Ord 'a =
    case ts of
    | [] -> t :: []
    | t2 :: ts ->
        if (rank t) < (rank t2) then
            t :: t2 :: ts
        else
            ins_tree (link t, t2), ts
    end

fn merge_trees 'a h1,h2: [List[Node['a]], List[Node['a]]] -> List[Node['a]] where Ord 'a =
    case (h1, h2) of
    | (ts1, []) -> h1
    | ([], ts2) -> h2
    | (t1 :: ts1, t2 :: ts2) ->
        if (rank t1) < (rank t2) then
            t1 :: (merge_trees ts1, t2 :: ts2)
        else if (rank t2) < (rank t1) then
            t2 :: (merge_trees t1 :: ts1, ts2)
        else
            ins_tree (link t1,t2), (merge_trees ts1,ts2)
    end

fn normalize 'a h: [List[Node['a]]] -> List[Node['a]] where Ord 'a =
    case h of
    | [] -> h
    | t :: ts -> ins_tree t, ts
    end

fn insert 'a x,h: ['a, Heap['a]] -> Heap['a] where Ord 'a =
    case h of
    | Heap t1 :: t2 :: ts -> 
        if (rank t1) == (rank t2) then
            Heap (skew_link x,t1,t2) :: ts
        else
            Heap (Node 0,x,[],[]) :: t1 :: t2 :: ts
    | Heap ts ->
        Heap (Node 0,x,[],[]) :: ts
    end

fn merge 'a h1,h2: [Heap['a], Heap['a]] -> Heap['a] =
    let Heap h1 = h1 in
    let Heap h2 = h2 in
    Heap merge_trees (normalize h1), (normalize h2)

fn find_min 'a h: [Heap['a]] -> Option['a] where Ord 'a =
    case h of
    | Heap [] -> None
    | Heap t :: [] -> Some root t
    | Heap t :: ts ->
        let x = root t in
        case find_min Heap ts of
        | Some y -> Some min x,y
        | None -> None
        end
    end

fn delete_min 'a h: [Heap['a]] -> Option[Heap['a]] where Ord 'a =
    case h of
    | Heap [] -> None
    | Heap ts ->
        let fn get_min ts: [List[Node['a]]] -> (Node['a], List[Node['a]]) =
            case ts of
            | t :: [] -> (t, [])
            | t :: ts ->
                let (t1, ts1) = get_min ts in
                if (root t1) < (root t) then
                    (t1, t :: ts1)
                else
                    (t, ts)
            end
        in
        let fn insert_all ts, h: [List['a], Heap['a]] -> Heap['a] =
            case ts of
            | [] -> h
            | t :: ts -> insert_all ts,(insert t,h)
            end
        in
        let ((Node _,x,xs,c), ts1) = get_min ts in
        Some insert_all xs, (Heap merge_trees (rev c),(normalize ts1))
    end

fn empty = Heap []
fn :- x,h = insert x,h

data Command = Insert Int | Pop
data ParseError = ParseError Str,Str

fn parse_digit s: [Str] -> (Str, Result[Int, ParseError]) =
    if str_some s then
        case str_head s of
        | '0' -> ((str_tail s), Ok 0)
        | '1' -> ((str_tail s), Ok 1)
        | '2' -> ((str_tail s), Ok 2)
        | '3' -> ((str_tail s), Ok 3)
        | '4' -> ((str_tail s), Ok 4)
        | '5' -> ((str_tail s), Ok 5)
        | '6' -> ((str_tail s), Ok 6)
        | '7' -> ((str_tail s), Ok 7)
        | '8' -> ((str_tail s), Ok 8)
        | '9' -> ((str_tail s), Ok 9)
        | _   -> (s, Err ParseError s,"digit")
        end
    else (s, Err ParseError s,"digit")

fn parse_int s,x: [Str, Int] -> (Str, Int) =
    case parse_digit s of
    | (s1, Ok digit) ->
        parse_int s1,(x * 10 + digit)
    | (s1, Err e   ) ->
        (s1, x)
    end

fn parse_command s: [Str] -> (Str, Result[Command, ParseError]) =
    if str_some s then
        case str_head s of
        | 'i' -> let (s1, x) = parse_int (str_tail s),0 in (s1, Ok Insert x)
        | 'p' -> ((str_tail s), Ok Pop)
        | _ -> (s, Err ParseError s, "command")
        end
    else (s, Err ParseError s,"command")

fn format_heap 'a h: [Heap['a]] -> Str where Ord 'a + fmt.ToString 'a =
    case find_min h of
    | None -> ""
    | Some x ->
        let h1 = option.unwrap delete_min h in
        let h1_formatted = format_heap h1 in
        (fmt.to_string x) * " " * h1_formatted
    end


routine main =
    let mut h = option.unwrap delete_min 4 :- 3 :- 8 :- 1 :- 2 :- empty in begin
    while true then begin
        let line = io.readline ();
        case parse_command line of
        | (_, Ok Insert x) -> begin
            h <- insert x,h;
            io.println format_heap h
            end
        | (_, Ok Delete x) -> begin
            h <- case delete_min h of
                 | None -> h
                 | Some h1 -> h1
                 end ;
            io.println format_heap h
            end
        | (_, Err e) -> io.println "Bad command"
        end
    end
    end

