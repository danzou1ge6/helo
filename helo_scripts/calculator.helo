data ParseError = ParseError Str,Str

fn parse_digit s =
    if str_some s then
        case str_head s of
            '0' -> ((str_tail s), Ok 0)
            | '1' -> ((str_tail s), Ok 1)
            | '2' -> ((str_tail s), Ok 2)
            | '3' -> ((str_tail s), Ok 3)
            | '4' -> ((str_tail s), Ok 4)
            | '5' -> ((str_tail s), Ok 5)
            | '6' -> ((str_tail s), Ok 6)
            | '7' -> ((str_tail s), Ok 7)
            | '8' -> ((str_tail s), Ok 8)
            | '9' -> ((str_tail s), Ok 9)
            | _   -> (s, Err ParseError s,"digit")
        end
    else (s, Err ParseError s,"digit")

data Op = OpAdd | OpSub | OpMul | OpDiv

fn op_precedence op =
    case op of
          OpAdd -> (4, 3)
        | OpSub -> (4, 3)
        | OpMul -> (8, 7)
        | OpDiv -> (8, 7)
    end

fn op_precedence_left op = let (left, _) = op_precedence op in left
fn op_precedence_right op = let (_, right) = op_precedence op in right

fn parse_operator s: [Str] -> (Str, Result[Op, ParseError]) =
    if str_some s then
        case str_head s of
            '+' -> ((str_tail s), Ok OpAdd)
            | '-' -> ((str_tail s), Ok OpSub)
            | '*' -> ((str_tail s), Ok OpMul)
            | '/' -> ((str_tail s), Ok OpDiv)
            | _   -> (s, Err ParseError s,"operator")
        end
    else (s, Err ParseError s,"operator")

fn parse_float s =
    let fn parse_int s,x =
        case parse_digit s of
              (s1, Ok digit) -> parse_int s1,(x *. 10.0 +. int_to_float digit)
            | (s1, Err e   ) -> (s1, x)
        end
    in
    let fn parse_mantissa s,x,n =
        case parse_digit s of
              (s1, Ok digit) -> parse_mantissa s1,(x +. n *. int_to_float digit),(n *. 0.1)
            | (s1, Err e   ) -> (s1, x)
        end
    in
    
    case parse_digit s of
        (_s, Ok _x) ->
            let (s1, x) = parse_int s,0.0 in
            if str_some s1 then
                case str_head s1 of
                    '.'       ->
                        let (s2, x) = parse_mantissa (str_tail s1),x,0.1 in
                        (s2, Ok x)
                    | otherwise -> (s1, Ok x)
                end
            else (s1, Ok x)
        | otherwise -> (s, Err ParseError s,"float")
    end

data Expr = Apply Op,Expr,Expr
          | Lit Float

fn build_infix_expr lhs,op,s =
    let p_right = op_precedence_right op in
    case parse_expr_precedenced s,p_right of
        (s1, Ok rhs)  -> (s1, Ok Apply op,lhs,rhs)
        | (s1, Err e) -> (s1, Err e)
    end

fn parse_tag tag,s: [Char, Str] -> (Str, Result[Char, ParseError]) =
    if str_some s then
        if (str_head s) `char_eq` tag then
            ((str_tail s), Ok tag)
        else
            (s, Err ParseError s,(char_to_str tag))
    else
        (s, Err ParseError s,(char_to_str tag))

fn parse_expr_lit s: [Str] -> (Str, Result[Expr, ParseError]) =
    case parse_float s of
        (s1, Ok float) -> (s1, Ok (Lit float))
        | (s1, Err e)    -> (s1, Err e)
    end

fn parse_prefix_expr s: [Str] -> (Str, Result[Expr, ParseError]) =
    case parse_tag '(',s of
        | (s1, Ok _) ->
            case parse_expr s1 of
                (s2, Ok expr) ->
                    case parse_tag ')',s2 of
                        (s3, Ok _) -> (s3, Ok expr)
                        | (s3, Err e) -> (s3, Err e)
                    end
                | (s2, Err e) -> (s2, Err e)
            end
        | _        ->
            case parse_tag '-',s of
                | (s1, Ok _) ->
                    let p_right = op_precedence_right OpSub in
                    case parse_expr_precedenced s1,p_right of
                        | (s2, Ok expr) -> (s2, Ok Apply OpSub,(Lit 0.0),expr)
                        | (s2, Err e) -> (s2, Err e)
                    end
                | _ -> parse_expr_lit s
            end
    end

fn parse_expr_precedenced s,prec: [Str, Int] -> (Str, Result[Expr, ParseError]) =
    let fn parse s,lhs,prec =
        case parse_operator s of
            (s1, Ok op) ->
                if (op_precedence_left op) >= prec then
                    case build_infix_expr lhs,op,s1 of
                        (s2, Ok expr) -> parse s2,expr,prec
                        | (s2, Err e)   -> (s2, Err e)
                    end
                else
                    (s, Ok lhs)
            | (s1, Err e)   -> (s, Ok lhs)
        end
    in
    case parse_prefix_expr s of
        (s1, Ok lhs)  -> parse s1,lhs,prec
        | (s1, Err e) -> (s1, Err e)
    end

fn parse_expr s = parse_expr_precedenced s,0

fn parse_expr_finish s =
    case parse_expr s of
        (s1, Ok expr) ->
            if (str_len s1) /= 0 then
                Err ParseError s1,"expression-finished"
            else
                Ok expr
        | (s1, Err e) -> Err e
    end
            

fn eval_expr expr =
    case expr of
        Lit x -> x
        | Apply op,lhs,rhs ->
            let lhs = eval_expr lhs in
            let rhs = eval_expr rhs in
            case op of
                OpAdd   -> lhs +. rhs
                | OpSub -> lhs -. rhs
                | OpMul -> lhs *. rhs
                | OpDiv -> lhs /. rhs
            end
    end

fn str_repeat c,n =
    let fn helper s,c,n =
        if n == 0 then
            s
        else
            helper ((char_to_str c) `str_cat` s),c,(n - 1)
    in
        helper "",c,n

routine print_parse_error e,s =
    let ParseError at,name = e in
    begin
        println (str_repeat ' ',((str_len s) - (str_len at)))
                 `str_cat` "| <- Error parsing "
                 `str_cat` name
                 `str_cat` " Here"
    end

routine print_result x =
    println "= " `str_cat` (float_to_str x)

routine main = begin
    while true then begin
        let line = readline ();
        case parse_expr_finish line of
            Ok expr  -> print_result eval_expr expr
            | Err e  -> print_parse_error e,line
        end
    end
end