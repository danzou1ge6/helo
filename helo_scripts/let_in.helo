
fn take_first_few xs, n =
    let fn take xs, n =
        if n == 0
        then Nil
        else case xs of Con x1, xs1 -> Con x1, (take xs1, (n - 1))
                      | Nil         -> Nil
    in take xs, n


fn fst x = let (a, b) = x in a

fn partial2_1 f, x =
    let fn g y = f x, y in g

fn sum x : [Int] -> Int =
    if x == 0
    then 0
    else let rest = sum (x - 1)
         in x + rest

